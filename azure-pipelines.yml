# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'

parameters:
- name: run_release
  displayName: Release Build Artifact(s)
  type: boolean
  default: false
- name: python_reference_version
  displayName: Reference Python Version
  type: string
  default: '3.7'
  values:
  - '3.6'
  - '3.7'
  - '3.8'

variables:
  # Configuration (set artifact feed name in runtime vars)
- name: artifact_name
  value: 'drop'
- name: artifact_feed
  value: $(AzureArtifactsFeed)

  # Derived variables
- name: is_stable_branch_ref
  value: eq( '${{ variables['Build.SourceBranch'] }}' , 'refs/heads/master' )
- name: is_tag_ref
  value: startsWith( '${{ variables['Build.SourceBranch'] }}', 'refs/tags/' )

jobs:
- job: job_test
  displayName: Test Package
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      # Derive these from the allowable versions?
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - bash: |
      curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      echo "##vso[task.prependpath]$HOME/.poetry/bin"
      source $HOME/.poetry/env
      echo "##[debug]Poetry version: $(poetry --version)"
      poetry install
    displayName: 'Install Poetry, Package + Deps'

  - script: |
      poetry add pytest-azurepipelines
      poetry run pytest --cov=pep440_versions --cov-report=xml
    displayName: 'Test Package'


- job: job_build
  displayName: Build Distributable Package
  dependsOn: job_test
  variables:
    python.version: ${{ parameters.python_reference_version }}

  steps:
  # TODO: Template these steps
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - bash: |
      curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      echo "##vso[task.prependpath]$HOME/.poetry/bin"
      source $HOME/.poetry/env
      echo "##[debug]Poetry version: $(poetry --version)"
      poetry install
    displayName: 'Install Poetry, Package + Deps'

  - bash: poetry build
    displayName: Poetry Build

  - task: CopyFiles@2
    displayName: 'Copy package to artifact staging'
    inputs:
      SourceFolder: 'dist'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true

  - task: PublishBuildArtifacts@1
    displayName: 'Create artifact drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '${{ variables.artifact_name }}'


- job: job_release
  displayName: Release Build Artifact
  dependsOn: job_build
  # Run job if requested, or it's triggered from stable (master), or it's triggered from a tag push.
  condition: or( ${{ parameters['run_release'] }}, ${{ variables['is_stable_branch_ref'] }}, ${{ variables['is_tag_ref'] }} )
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    python.version: ${{ parameters.python_reference_version }}
  steps:
  - task: TwineAuthenticate@0
    displayName: Configure Auth for Feed
    inputs:
      artifactFeeds: $(artifact_feed)

  - task: DownloadBuildArtifacts@0
    displayName: Download Artifacts
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '${{ variables.artifact_name }}'
      downloadPath: '$(System.ArtifactsDirectory)'

  - task: UsePythonVersion@0
    displayName: 'Use Python $(python.version)'
    inputs:
      versionSpec: '$(python.version)'
  
  - bash: |
      python -m pip install ${SYSTEM_ARTIFACTSDIRECTORY}/${ARTIFACT_NAME}/*.tar.gz
    displayName: Install Self  

  - task: PythonScript@0
    displayName: Validate Version Tag
    # Only validate if we're building from a tag; assume user knows what they're doing otherwise.
    condition: ${{ variables['is_tag_ref'] }}
    continueOnError: false
    inputs:
      scriptSource: 'inline'
      arguments: $(Build.SourceBranch)
      script: |
        import sys
        from configparser import ConfigParser
        from pep440_versions import Version
        from pep440_versions.utils import InvalidVersion

        gitref = sys.argv[1]
        tag = gitref.replace('refs/tags/', '')
        try:
            v = Version(tag)
        except InvalidVersion:
            print(f"##vso[task.logissue type=error]'{tag}' is not a PEP440 compliant tag.")
            sys.exit(1)
        else:
            v_str = str(v)
            if v_str != tag:
                print(f"##vso[task.logissue type=error]Version tag '{tag}' is not normalised ('{v_str}'); fix it up.")
                sys.exit(1)
            parser = ConfigParser()
            parser.read('pyproject.toml')
            v_str_pkg = parser.get(section='tool.poetry', option='version').strip('"')
            if tag != v_str_pkg:
                print(f"##vso[task.logissue type=error]Version tag '{tag}' does not match packaging version '{v_str_pkg}'; fix it up.")
                sys.exit(1)
        sys.exit(0)

  - script: |
      python -m pip install twine
      twine upload -r '$(artifact_feed)' --config-file $(PYPIRC_PATH) $(System.ArtifactsDirectory)/${{ variables.artifact_name }}/*
    displayName: Upload Artifact
